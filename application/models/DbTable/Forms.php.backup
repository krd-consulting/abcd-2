<?php

class Application_Model_DbTable_Forms extends Zend_Db_Table_Abstract
{

    protected $_name = 'forms';
    
    protected function _collateFormRecords(array $orig, array $new) {
        foreach ($new as $id => $freq) {
            if (!array_key_exists($id, $orig)) {
                $orig["$id"] = $freq;
            }
        }
        return $orig;
    }
    
    protected function _getPtcpFormData($ptcpID) {
        $forms = array();
        
        $ptcpDepts = new Application_Model_DbTable_ParticipantDepts;
        $ptcpProgs = new Application_Model_DbTable_ParticipantPrograms;
        $ptcpGrps  = new Application_Model_DbTable_ParticipantGroups;
        
        $myDepts = $ptcpDepts->getList('depts',$ptcpID);
        $myProgs = $ptcpProgs->getList('progs',$ptcpID);
        $myGroups= $ptcpGrps->getList('groups',$ptcpID);
        
        foreach ($myDepts as $deptID) {
            $deptForms = $this->_getDeptFormData($deptID);
            $forms = $this->_collateFormRecords($forms, $deptForms);
        }
        
        foreach ($myProgs as $progID) {
            $progForms = $this->_getProgFormData($progID);
            $forms = $this->_collateFormRecords($forms, $progForms);
        }
        
        foreach ($myGroups as $groupID) {
            $groupForms = $this->_getGroupFormData($groupID);
            $forms = $this->_collateFormRecords($forms, $groupForms);
        }
        
        return $forms;
    }
    
    protected function _getDeptFormData($deptID) {
        $forms = array();
        
        //using query to avoid instantiating extra objects
        $query = "SELECT formID,frequency 
                  FROM deptForms
                  WHERE deptID = $deptID AND required=1";
        $results = $this->getAdapter()->fetchAll($query);

        foreach ($results as $row) {
            $formID    = $row['formID'];
            $frequency = $row['frequency'];
            $forms["$formID"] = $frequency;
        }
        
        return $forms;        
    }
    
    protected function _getFunderFormData($funderID) {
        $forms = array();
        
        //using query to avoid instantiating extra objects
        $query = "SELECT formID,frequency 
                  FROM funderForms
                  WHERE funderID = $funderID AND required=1";
        $results = $this->getAdapter()->fetchAll($query);

        foreach ($results as $row) {
            $formID    = $row['formID'];
            $frequency = $row['frequency'];
            $forms["$formID"] = $frequency;
        }
   
        return $forms;        
    }
        
    protected function _getProgFormData($progID) {
        $forms = array();

        //get my funders
        $funderQuery = "SELECT funderID 
                        FROM programFunders 
                        WHERE programID = $progID";
        
        $funders = $this->getAdapter()->fetchAll($funderQuery);
        
        //get funders' forms
        foreach ($funders as $funder) {
            $fID = $funder['funderID'];
            $funderForms = $this->_getFunderFormData($fID);
            $forms = $this->_collateFormRecords($forms, $funderForms);
        }
        
        //get my own forms
        $programQuery = "SELECT formID,frequency
                         FROM programForms
                         WHERE programID = $progID";
        $progForms = $this->getAdapter()->fetchAll($programQuery);
        foreach ($progForms as $progForm) {
            $id = $progForm['formID'];
            $frequency = $progForm['frequency'];
            if (!array_key_exists($id, $forms)) {
                $forms["$id"] = $frequency;
            }
        }
        return $forms;
    }
    
    protected function _getGroupFormData($groupID){
        $forms = array();
        
        //get my own forms
        $formQuery = "SELECT formID, frequency
                      FROM groupForms
                      WHERE groupID = $groupID";
        $groupForms = $this->getAdapter()->fetchAll($formQuery);

        foreach ($groupForms as $groupForm) {
            $id = $groupForm['formID'];
            $freq = $groupForm['frequency'];

            if (!array_key_exists($id, $forms)) {
                $forms["$id"] = $freq;
            }
        }

        //return array.
        return $forms;

    }
    
    public function getAssociatedForms($type,$typeID) {
        //$type can be one of: ptcp, dept, prog, group
        switch ($type) {
            case 'ptcp' : $result = $this->_getPtcpFormData($typeID);
                break;
            case 'fund' : $result = $this->_getFunderFormData($typeID);
                break;
            case 'dept' : $result = $this->_getDeptFormData($typeID);
                break;
            case 'prog' : $result = $this->_getProgFormData($typeID);
                break;
            case 'group': $result = $this->_getGroupFormData($typeID);
                break;
            default: throw new Exception("Invalid type passed to getAssociatedForms().");
        } 
        return $result;
    }
    
    public function getName($id) {
        $row = $this->fetchRow("id = $id");
        $name = $row['name'];
        return $name;
    }
    
    public function getStaffForms() {
        $root = Zend_Registry::get('root');
        $uid = Zend_Registry::get('uid');
        
        if ($root) {
            $result = $this->getIDs();
        } else {
            $result = array();
            $userDepts = new Application_Model_DbTable_UserDepartments;
            $deptForms = new Application_Model_DbTable_DeptForms;
            $myDepts = $userDepts->getList('depts', $uid);
            foreach ($myDepts as $dID) {
                $formIDs = $deptForms->getList('forms', $dID);
                foreach ($formIDs as $fid) {
                    array_push($result,$fid);
                }
            }
        }
        return array_unique($result);
    }
    
    public function getPtcpForms($ptcpID) {
        $id = $ptcpID;
        $allForms = array();
        
        //for legacy reasons, forms are pulled via program IDs
        //but participants may not be enrolled in all programs,
        //so we need to pull ptcp departments, then all programs for those depts
        
        //BUT this shows forms required for programs in which ptcp is
        //not enrolled, so after pulling, let's cull program unless enrolled
        
        $programIDs = array();
        
        $ptcpDepts = new Application_Model_DbTable_ParticipantDepts;
        $ptcpProgs = new Application_Model_DbTable_ParticipantPrograms;
        $programTable = new Application_Model_DbTable_Programs;
        $myDepts = $ptcpDepts->getList('depts',$ptcpID);
        $myProgs = $ptcpProgs->getList('progs', $ptcpID);
           
        
        foreach ($myDepts as $dID) {
            $progs = $programTable->getProgByDept($dID);
            foreach ($progs as $prog) {
                    array_push($programIDs, $prog['id']);
            }
        }
        
        //for each program, get its own forms, funder forms, and dept forms
        
        foreach ($programIDs as $pid) {
            $forms = $programTable->getAllForms($pid);
            
            foreach ($forms as $fid => $formRecord) {
                if (!array_key_exists('inherit', $formRecord)) {
                    $formRecord['inherit'] = 'program';
                }
                if ($formRecord['target'] == 'participant') {
                    $allForms[$fid] = $formRecord; //overwrites duplicates, keeping unique records only
                }
            }
        }
        
        $formData = new Application_Model_DbTable_DynamicForms;
        $finalForms = array();
        
        foreach ($allForms as $fid => $formRecord) {    
            //hack to fix false positives for forms
            //required in programs in which the ptcp
            //is not enrolled.
            $recordWanted = TRUE;
            if ($formRecord['inherit'] == 'program') {
                $recordWanted = FALSE;
                $formPrograms = new Application_Model_DbTable_ProgramForms;
                $allFormPrograms = $formPrograms->getList('programs',$fid);
                
                foreach ($allFormPrograms as $progID) {
                    print_r($progID);
                    if (in_array($progID, $myProgs)) {
                        $recordNeeded = TRUE;
                    } else {
                        $recordNeeded = FALSE;
                    }
                    $recordWanted = $recordWanted || $recordNeeded;
                }
            } 
            
            //end hack
            
            $myData = $formData->getRecords($id, $formRecord['table']);
            $numRecords = count($myData);
            
            if (($numRecords == 0) && ($formRecord['required'] == 1)) {
                $formRecord['flag'][0] = 'missing';
            } elseif ($numRecords > 0) { 
                
                $latestDate = $myData[0]['responseDate'];
                $frequency = $formRecord['frequency'];
                if ( (!is_null($frequency)) && ($frequency != 0)) {
                    $freqInDays = array(
                        'monthly'       => 30,
                        'quarterly'     => 90,
                        'semi-annual'   => 180,
                        'annual'        => 365
                    );
                    $daysTillNeeded = $freqInDays[$frequency];
                    $timeTillNeeded = $daysTillNeeded * 24 * 60 * 60;
                    $alert = 21*24*60*60; //two weeks
                    
                    $now = time();
                    $last= strtotime($latestDate);
                    $next = $last + $timeTillNeeded;
                    $timeLeft = $next - $now;
                    if ($timeLeft < $alert) {
                        $formRecord['flag'][1] = 'upcoming';
                    }
                }
            
                foreach ($myData as $datapoint) {
                    $dataID = $datapoint['id'];
                    $formRecord['data'][$dataID] = $datapoint;
                }        
            } //endif
            
            //if ($recordWanted) 
               array_push($finalForms, $formRecord);
        }//end foreach 
        
        return $finalForms;
    }
    
    public function addForm($id, $name,$tableName,$desc,$type,$target) 
    {
	$data = array(
		'id'                => $id,
                'name'              => $name,
                'tableName'         => $tableName,
                'description'       => $desc,
                'type'              => $type,
                'target'            => $target
		);
        
	return $this->insert($data);
    }

    public function updateForm($id,$name,$tableName,$desc,$type,$target)
    {
    	$data = array(
                'id'                => $id,
		'name'              => $name,
                'tableName'         => $tableName,
                'description'       => $desc,
                'type'              => $type,
                'target'              => $target
		);
	$this->update($data, 'id = ' . (int)$id);
    }
    
    public function deleteForm($id)
    {
	$data = array(
		'enabled' => 0
	);

	$this->update($data, 'id = '. (int)$id);
        $restoreRow = $this->fetchRow("id = $id")->toArray();
	$this->delete('id = ' . (int)$id);
	$this->insert($restoreRow);

    }
   
    public function enable($id) {
	$data = array ('enabled' => 1);
	return $this->update($data, "id = $id");
    }
 
    public function getIDs() {
        $row = $this->fetchAll("enabled = 1");
        $result = array();
        foreach ($row as $formRecord) {
            array_push($result, $formRecord['id']);
        }
        return $result;
    }

    public function getRecord ($id) {
        $id = (int)$id;
        $row = $this->fetchRow('id = ' . $id);
        if (!$row) {
               throw New Exception("Could not find a form with that ID.");
        }

	if ($row['enabled'] != 1) {
		throw new exception("This form is not enabled in the system and cannot be used.");
	}

        return $row->toArray();
    }
    
}

